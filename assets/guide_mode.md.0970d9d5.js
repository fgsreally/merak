import{_ as s,o as a,c as l,a as o}from"./app.ca02e63f.js";const C=JSON.parse('{"title":"特殊模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"iframe模式","slug":"iframe模式","link":"#iframe模式","children":[]},{"level":2,"title":"库模式","slug":"库模式","link":"#库模式","children":[]},{"level":2,"title":"ssr","slug":"ssr","link":"#ssr","children":[{"level":3,"title":"服务端","slug":"服务端","link":"#服务端","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]}]}],"relativePath":"guide/mode.md","lastUpdated":1700400907000}'),n={name:"guide/mode.md"},e=o(`<h1 id="特殊模式" tabindex="-1">特殊模式 <a class="header-anchor" href="#特殊模式" aria-hidden="true">#</a></h1><h2 id="iframe模式" tabindex="-1">iframe模式 <a class="header-anchor" href="#iframe模式" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Merak</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">merak-core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Merak</span><span style="color:#A6ACCD;">(name</span><span style="color:#676E95;font-style:italic;">/** 子应用name */</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url</span><span style="color:#676E95;font-style:italic;">/** 子应用url */</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">iframe</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iframeid</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>这会使子应用<code>js</code>在<code>iframe</code>中执行，</p><p>注意 ，同一个<code>iframeid</code>的子应用会被分配到同一个<code>iframe</code>中执行<code>js</code>，当一个<code>iframeid</code>中所有子应用都被销毁时，才移除该<code>iframe</code></p><div class="tip custom-block"><p class="custom-block-title">提醒</p><ol><li>子应用可以不暴露钩子，原因详见<a href="./../blog/question-from.html#难以面面俱到的隔离">详见</a>，但必须保证该子应用的<code>iframeid</code>唯一</li><li>不暴露钩子时,这和无界的重建模式一致</li><li>不优先考虑，但如果子应用始终出现不明原因的错误，可以尝试一下</li><li>如果你需要同时打开子应用的两个路由页面，只需创建两个实例，保证<code>iframeid</code>不相同就好</li></ol></div><h2 id="库模式" tabindex="-1">库模式 <a class="header-anchor" href="#库模式" aria-hidden="true">#</a></h2><blockquote><p>如果执意使用模块联邦等方案（引入的是<code>js</code>文件而非<code>html</code>）</p></blockquote><p>当挂载一个组件时（如果对象只是一段普通脚本而非一个需要挂载的组件，意义较小，因为这样没有必要<code>dom</code>隔离），会给它提供一个单独的上下文进行,对其进行隔离</p><blockquote><p>包括<code>dom</code>/<code>style</code>/<code>js</code>的隔离</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Merak</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createLibProxy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">merak-core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Merak</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createLibProxy</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><ol><li>优点\\缺点和普通模式一样</li><li>没有对<code>location</code>,<code>history</code>的隔离</li></ol></div><h2 id="ssr" tabindex="-1">ssr <a class="header-anchor" href="#ssr" aria-hidden="true">#</a></h2><p>当主子应用均为<code>ssr</code>时，子应用的<code>ssr</code>效果能在主应用中起效</p><blockquote><p>这倒也不一定，可以是一个网关之类的东西，反正能把子应用的<code>html</code>拼到主应用上，再返回给浏览器就行</p></blockquote><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-hidden="true">#</a></h3><p>服务端需要做一定改造，需往主应用<code>html</code>中加入一段：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-merak-url</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 子应用的ssr渲染结果(html) --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>请注意：这不是真正的<code>ssr</code>,它并不能“跑”在服务端中，毕竟，操作dom是不可回避的事情。</p><p>它只是通过注入一段<code>template</code>到<code>html</code>中，在客户端渲染时，直接拿到<code>template</code>进行渲染。</p><p>简而言之，对<code>seo</code>和<code>首屏渲染</code>均有助益，对<code>ssr</code>使用者应该足够有吸引力</p><blockquote><p>也可以将<code>template</code>换成其他标签，使其不可见就行</p></blockquote></div><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-hidden="true">#</a></h3><p>原理详见<a href="./loader.html#ssrloader">loader</a></p><blockquote><p>也可以自己设计<code>ssr</code>的流程</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> loader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SSRLoader</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Merak</span><span style="color:#A6ACCD;">(id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  loader</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,23),p=[e];function c(t,r,i,d,D,y){return a(),l("div",null,p)}const A=s(n,[["render",c]]);export{C as __pageData,A as default};
