import{_ as e,o,c,a as d}from"./app.ca02e63f.js";const k=JSON.parse('{"title":"国外微前端的不同流派","description":"","frontmatter":{},"headers":[{"level":2,"title":"template","slug":"template","link":"#template","children":[]},{"level":2,"title":"lifecycle","slug":"lifecycle","link":"#lifecycle","children":[]},{"level":2,"title":"federaion","slug":"federaion","link":"#federaion","children":[]},{"level":2,"title":"module","slug":"module","link":"#module","children":[]}],"relativePath":"blog/genre.md","lastUpdated":1700400907000}'),p={name:"blog/genre.md"},a=d('<h1 id="国外微前端的不同流派" tabindex="-1">国外微前端的不同流派 <a class="header-anchor" href="#国外微前端的不同流派" aria-hidden="true">#</a></h1><blockquote><p>诚然这和<code>merak</code>无关，但我认为值得一说。</p></blockquote><p>至少在这个项目开发初期，我都是对标着国内主流微前端方案做的，</p><p>无非是轻量一点，舍弃维护困难的部分，积极拥抱<code>esm</code>，</p><p>但国外微前端的一些想法，倒是让这个项目有一些不一样的能力了</p><p>国外微前端大约有四类</p><h2 id="template" tabindex="-1">template <a class="header-anchor" href="#template" aria-hidden="true">#</a></h2><p>这是最简单的一种，也就是不管不顾，把子应用的<code>html</code>拼进主应用对应位置</p><p>等同于将几个字符串拼接起来</p><p>当然，不同的库手法不同， 有的是使用web component 去拼， 有的在主页面专门留一个内容区，主应用只负责侧边栏等部分 有的则在服务端拼 有的干脆在网关处拼</p><p>然后再提供一些小功能，就差不多了</p><blockquote><p>这种模式虽简单到近乎简陋，但却有一个优势：这是唯一一个可能支持<code>SSR</code>的模式</p></blockquote><h2 id="lifecycle" tabindex="-1">lifecycle <a class="header-anchor" href="#lifecycle" aria-hidden="true">#</a></h2><p>为什么说前一类方式简单？因为其对于<code>js</code>的影响装聋作哑--它根本就没有考虑<code>js</code>这个东西！</p><p>如果子应用监听了个事件，那么主应用将毫无办法</p><p>只能寄希望于挂载多个子应用后，内存仍未爆炸--这显然是不可能的</p><p>真实的需求是，需要子应用的时候去加载，不需要的时候再移除</p><p><code>single-spa</code>首先做出努力：将子应用暴露出三个钩子,不管子应用是什么框架，用什么写法，我只负责在初始化、挂载、卸载时执行钩子，</p><p>至于怎么初始化，怎么挂载，那是你自己的事</p><blockquote><p><code>single-spa</code>同样也很简单，故而其团队把更多的精力放在了生态上，导致相关的包奇多,反而看着不那么简单了</p></blockquote><p>国内的微前端基本是延续这个思路，只不过做的更完善，提供了更多托底的能力</p><p>不能说这样不好，实际上这样对维护水平要求很高--你必须要用各种hacker手法去造出<code>&quot;iframe&quot;</code>，在有限的代码里处理掉无限的边界情况</p><h2 id="federaion" tabindex="-1">federaion <a class="header-anchor" href="#federaion" aria-hidden="true">#</a></h2><p><code>single-spa</code>的团队比较倾向<code>in browser</code>,也就是所有功能尽量利用浏览器原生功能实现</p><p>这样一个显而易见的好处是，项目很难出现完全迷糊的问题--毕竟没有<code>webpack</code>了是吧</p><p>但麻烦的是，浏览器原生压根就没有模块加载功能（至少其兼容度完全不行），所以<code>single-spa</code>主推<code>systemjs</code>，案例都是绑定来讲</p><p>我们很难去这么学，<code>webpack</code>是必须要处理的一个环节</p><p>那在<code>webpack</code>情况下，很多事情就变得很糟糕了,依赖共享、版本控制、功能导出...一些功能还能自己写插件解决，但<code>webpack</code>内置的模块加载方案可不是 <code>systemjs</code>那般讲道理的：一个应用的chunk,挂载到浏览器上就会去找<code>webpack</code>的全局变量报道，但微前端中，主应用加载子应用，子应用的<code>chunk</code>压根就没法找到这个全局变量（因为每个应用全局变量名不一样）...你再着急也只能干瞪眼</p><p><code>webpack</code>官方在4-5的过程调整了架构，既然社区没法搞，俺就留个后门帮帮你们，然后推出了模块联邦这个插件</p><p>可以看到，其实模块联邦这个插件并没有提供什么不得了的能力，它只是把打包器带来的麻烦抹平了而已，</p><p>实际上，你只要不用<code>webpack</code>一样可以抹平麻烦，这个插件其实什么也没办到 奇葩的是，这个模块联邦的实现反而变成了一种标准，本身就有原生模块加载的<code>vite</code>等反而倒过来去追求模块联邦，有一点本末倒置的味道了</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>举一些例子：</p><ol><li>如果两个应用中只使用了<code>lodash</code>的一个方法，<code>webpack</code>一定会贴心的帮你把整个<code>lodash</code>单独打个包</li><li>如果我希望<code>a</code>应用升级时，<code>b</code>应用仍使用旧有的<code>a</code>应用模块，这要加非常多的魔法</li><li><code>a</code>暴露模块给<code>b</code>,<code>b</code>暴露模块给<code>c</code>...当我更改<code>a</code>时，我根本无法判断其究竟影响了多少个项目</li><li>子应用究竟暴露了什么，无从判断</li></ol></div><p>简言之，<code>federaion</code> 对应着在打包器中的微前端管理，主打依赖共享等功能，但<code>webpack</code>的模块联邦插件我认为还差着一节</p><blockquote><p>社区中围绕模块联邦提供一大堆插件，这些东西很棒，他们真的提供了新的功能，如果算上这些，那么<code>webpack</code>的模块联邦是一个不错的<code>federation</code>方案 但如果使用<code>federation</code>要引入这么一大堆东西，其实还是要再想想的</p></blockquote><h2 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-hidden="true">#</a></h2><p>这种我只知道一个:<code>piral</code> 它的意思是这样的：<code>一个模块并不唯一对应一个视图</code></p><p>比如我有个用户模块，那么侧边栏可能跟这个有关，登录页也有可能，一个模块就对应多处视图</p><p>在<code>piral</code>中，子应用并不再是主应用的一个单一视图部分，而是一个真正的<code>部分</code>，</p><p>子应用可以提供侧边栏+表单+顶部栏+鉴权...子应用可以干更多事情</p><p>应该有团队在用类似的东西，不过大多都是自用，名声不显</p><p>最大的原因就是，我们希望微前端方案能将现有的、可能编译器不同框架不同写法不同的项目连起来，而这种方案强迫所有应用使用统一编译器，统一规范，基本就等于从头开始了，只有起步的团队会考虑</p><blockquote><p>这种模式在微前端不常见，但在低代码领域却有一席之地，因为低代码项目都是自定一套标准，围绕着标准开发，统一的模式反而让<code>module</code>有用武之地</p></blockquote>',42),l=[a];function t(i,r,n,s,h,u){return o(),c("div",null,l)}const m=e(p,[["render",t]]);export{k as __pageData,m as default};
