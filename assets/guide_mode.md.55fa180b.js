import{_ as s,o as a,c as o,Q as l}from"./chunks/framework.435d96fe.js";const h=JSON.parse('{"title":"特殊模式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mode.md","filePath":"guide/mode.md","lastUpdated":1705886350000}'),n={name:"guide/mode.md"},p=l(`<h1 id="特殊模式" tabindex="-1">特殊模式 <a class="header-anchor" href="#特殊模式" aria-label="Permalink to &quot;特殊模式&quot;">​</a></h1><h2 id="iframe模式" tabindex="-1">iframe模式 <a class="header-anchor" href="#iframe模式" aria-label="Permalink to &quot;iframe模式&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Merak } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;merak-core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Merak</span><span style="color:#E1E4E8;">(name</span><span style="color:#6A737D;">/** 子应用name */</span><span style="color:#E1E4E8;">, url</span><span style="color:#6A737D;">/** 子应用url */</span><span style="color:#E1E4E8;">, { iframe: </span><span style="color:#9ECBFF;">&#39;iframeid&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Merak } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;merak-core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Merak</span><span style="color:#24292E;">(name</span><span style="color:#6A737D;">/** 子应用name */</span><span style="color:#24292E;">, url</span><span style="color:#6A737D;">/** 子应用url */</span><span style="color:#24292E;">, { iframe: </span><span style="color:#032F62;">&#39;iframeid&#39;</span><span style="color:#24292E;"> })</span></span></code></pre></div><p>这会使子应用<code>js</code>在<code>iframe</code>中执行，</p><p>注意 ，同一个<code>iframeid</code>的子应用会被分配到同一个<code>iframe</code>中执行<code>js</code>，当一个<code>iframeid</code>中所有子应用都被销毁时，才移除该<code>iframe</code></p><div class="tip custom-block"><p class="custom-block-title">提醒</p><ol><li>子应用可以不暴露钩子，原因详见<a href="./../blog/question-from.html#难以面面俱到的隔离">详见</a>，但必须保证该子应用的<code>iframeid</code>唯一</li><li>不暴露钩子时,这和无界的重建模式一致</li><li>不优先考虑，但如果子应用始终出现不明原因的错误，可以尝试一下</li><li>如果你需要同时打开子应用的两个路由页面，只需创建两个实例，保证<code>iframeid</code>不相同就好</li></ol></div><h2 id="库模式" tabindex="-1">库模式 <a class="header-anchor" href="#库模式" aria-label="Permalink to &quot;库模式&quot;">​</a></h2><blockquote><p>如果执意使用模块联邦等方案（引入的是<code>js</code>文件而非<code>html</code>）</p></blockquote><p>当挂载一个组件时（如果对象只是一段普通脚本而非一个需要挂载的组件，意义较小，因为这样没有必要<code>dom</code>隔离），会给它提供一个单独的上下文进行,对其进行隔离</p><blockquote><p>包括<code>dom</code>/<code>style</code>/<code>js</code>的隔离</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Merak, createLibProxy } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;merak-core&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Merak</span><span style="color:#E1E4E8;">(name, url, { proxy: </span><span style="color:#B392F0;">createLibProxy</span><span style="color:#E1E4E8;">(name, url) })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Merak, createLibProxy } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;merak-core&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Merak</span><span style="color:#24292E;">(name, url, { proxy: </span><span style="color:#6F42C1;">createLibProxy</span><span style="color:#24292E;">(name, url) })</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><ol><li>优点\\缺点和普通模式一样</li><li>没有对<code>location</code>,<code>history</code>的隔离</li></ol></div><h2 id="ssr" tabindex="-1">ssr <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;ssr&quot;">​</a></h2><p>当主子应用均为<code>ssr</code>时，子应用的<code>ssr</code>效果能在主应用中起效</p><blockquote><p>这倒也不一定，可以是一个网关之类的东西，反正能把子应用的<code>html</code>拼到主应用上，再返回给浏览器就行</p></blockquote><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h3><p>服务端需要做一定改造，需往主应用<code>html</code>中加入一段：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-merak-url</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 子应用的ssr渲染结果(html) --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-merak-url</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 子应用的ssr渲染结果(html) --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>请注意：这不是真正的<code>ssr</code>,它并不能“跑”在服务端中，毕竟，操作dom是不可回避的事情。</p><p>它只是通过注入一段<code>template</code>到<code>html</code>中，在客户端渲染时，直接拿到<code>template</code>进行渲染。</p><p>简而言之，对<code>seo</code>和<code>首屏渲染</code>均有助益，对<code>ssr</code>使用者应该足够有吸引力</p><blockquote><p>也可以将<code>template</code>换成其他标签，使其不可见就行</p></blockquote></div><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h3><p>原理详见<a href="./loader.html#ssrloader">loader</a></p><blockquote><p>也可以自己设计<code>ssr</code>的流程</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SSRLoader</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Merak</span><span style="color:#E1E4E8;">(id, url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  loader</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SSRLoader</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Merak</span><span style="color:#24292E;">(id, url, {</span></span>
<span class="line"><span style="color:#24292E;">  loader</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div>`,23),e=[p];function c(t,r,E,d,i,y){return a(),o("div",null,e)}const u=s(n,[["render",c]]);export{h as __pageData,u as default};
