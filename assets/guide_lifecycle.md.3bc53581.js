import{_ as s,o as a,c as n,a as l}from"./app.b2a592f6.js";const C=JSON.parse('{"title":"lifeCycle","description":"","frontmatter":{},"headers":[{"level":2,"title":"主应用中的生命周期","slug":"主应用中的生命周期","link":"#主应用中的生命周期","children":[]},{"level":2,"title":"子应用的生命周期","slug":"子应用的生命周期","link":"#子应用的生命周期","children":[{"level":3,"title":"keep-alive","slug":"keep-alive","link":"#keep-alive","children":[]}]}],"relativePath":"guide/lifecycle.md","lastUpdated":1694782368000}'),p={name:"guide/lifecycle.md"},e=l(`<h1 id="lifecycle" tabindex="-1">lifeCycle <a class="header-anchor" href="#lifecycle" aria-hidden="true">#</a></h1><h2 id="主应用中的生命周期" tabindex="-1">主应用中的生命周期 <a class="header-anchor" href="#主应用中的生命周期" aria-hidden="true">#</a></h2><p>具体生命周期详见<a href="./../api/lifecycle.html">LifeCycle</a></p><p>案例如下</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// example</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Merak</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/** */</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lifeCycle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beforeMount</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><h2 id="子应用的生命周期" tabindex="-1">子应用的生命周期 <a class="header-anchor" href="#子应用的生命周期" aria-hidden="true">#</a></h2><p>子应用的操作详见<a href="./../api/helper.html">merak-helper</a></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$onDestroy</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$onExec</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$onHidden</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$onRelunch</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$onShow</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">merak-helper</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 非keep-alive,子应用重新挂载时执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// keep-alive使用$onShow</span></span>
<span class="line"><span style="color:#82AAFF;">$onRelunch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ..</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 非keep-alive,子应用卸载时执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// keep-alive使用$onHidden</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">$onDestory</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ..</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 第一次挂载执行+ $onRelunch=非keep-alive 每次挂载执行</span></span>
<span class="line"><span style="color:#82AAFF;">$onExec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// xx</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="keep-alive" tabindex="-1">keep-alive <a class="header-anchor" href="#keep-alive" aria-hidden="true">#</a></h3><p>有无keep-alive的区别是没有区别（非iframe中）</p><p>在内部版本里，没有keep-alive会通过<code>innerHtml</code>的方式进行状态保留，但这会有一些问题，故而移除，如果确实需要该功能，那么可以：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$done</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$onDestroy</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">merak-helper</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#82AAFF;">$onDestory</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ..</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">$done</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>换言之，如果需要根本上移除子应用，应由子应用调用</p><blockquote><p>姑且可以理解为一个生产-消耗模型：子应用提供选择，主应用负责调用 我不确定这是不是个好的选择，如果你不认同，可以改写merak的类,详见<a href="./reform/proxy.html">沙箱改造</a></p></blockquote>`,14),o=[e];function t(c,r,i,y,D,F){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
